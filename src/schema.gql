# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Pet {
  id: ID!
  name: String!
  type: String!
  hungerLevel: Int!
  happinessLevel: Int!
  lastFed: DateTime!
  partnership: Partnership!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Restaurant {
  id: ID!
  partnerships: [Partnership]!
  name: String!
  location: String!
  cuisineType: String!
  dateAdded: String!
  extra: String
  visited: Boolean!
}

type Question {
  id: ID!
  user: User!
  questionText: String!
  category: String!
  answer: String
  dateAsked: String!
  partnerships: [Partnership!]!
}

type Movie {
  id: ID!
  title: String!
  genre: String!
  priority: String
  partnerships: [Partnership!]!
}

type DateIdea {
  id: ID!
  user: User!
  idea: String!
  category: String!
  review: String
  dateAdded: String!
  enthusiasm: Int!
  done: Boolean!
  partnershipIds: [Partnership!]!
}

type Activity {
  id: ID!
  activityType: String!
  pointsEarned: Int!
  date: String
  user: User!
  partnershipIds: [Partnership!]!
}

type Partnership {
  id: ID!
  user1: User!
  user2: User!
  startDate: String!
  status: String!
  sharedPoints: Int
  pets: [Pet!]
  questions: [Question!]
  restaurants: [Restaurant!]
  movies: [Movie!]
  dateIdeas: [DateIdea!]
  activities: [Activity!]
}

type Fact {
  id: ID!
  user: User!
  fact: String!
  dateAdded: String!
  importance: Int!
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  points: Int!
  facts: [Fact!]!
  dateIdeas: [DateIdea!]!
  questions: [Question!]!
  activities: [Activity!]
  partnershipsAsUser1: [Partnership!]
  partnershipsAsUser2: [Partnership!]
}

type AuthResponseDto {
  accessToken: String!
  userId: Float!
}

type Query {
  findAllUsers: [User!]!
  findUserById(id: Int!): User!
  facts: [Fact!]!
  fact(id: ID!): Fact!
  dateIdeas: [DateIdea!]!
  dateIdea(id: ID!): DateIdea!
  dateIdeasForPartnership(partnershipId: Int!): [DateIdea!]!
  questions: [Question!]!
  question(id: ID!): Question!
  pets: [Pet!]!
  pet(id: ID!): Pet!
  activities: [Activity!]!
  activitiesForPartnership(partnershipId: Int!): [Activity!]!
  activity(id: Int!): Activity!
  restaurants: [Restaurant!]!
  restaurant(id: Int!): Restaurant!
  movies: [Movie!]!
  movie(id: Int!): Movie!
  getPartnerships: [Partnership!]!
  getOnePartnership(id: ID!): Partnership!
  getUserPartnershipDetails(userId: Int!): [Partnership!]!
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): User!
  updateUser(updateUserInput: UpdateUserInput!): User!
  removeUser(id: Int!): Boolean!
  createFact(createFactInput: CreateFactInput!): Fact!
  updateFact(id: ID!, updateFactInput: UpdateFactInput!): Fact!
  removeFact(id: ID!): Boolean!
  createDateIdea(createDateIdeaInput: CreateDateIdeaInput!): DateIdea!
  updateDateIdea(id: ID!, updateDateIdeaInput: UpdateDateIdeaInput!): DateIdea!
  removeDateIdea(id: ID!): Boolean!
  createQuestion(createQuestionInput: CreateQuestionInput!): Question!
  updateQuestion(id: ID!, updateQuestionInput: UpdateQuestionInput!): Question!
  removeQuestion(id: ID!): Boolean!
  createPet(createPetInput: CreatePetInput!): Pet!
  updatePet(id: ID!, updatePetInput: UpdatePetInput!): Pet!
  removePet(id: ID!): Boolean!
  createActivity(createActivityInput: CreateActivityInput!): Activity!
  updateActivity(id: ID!, updateActivityInput: UpdateActivityInput!): Activity!
  removeActivity(id: ID!): Boolean!
  createRestaurant(createRestaurantInput: CreateRestaurantInput!): Restaurant!
  updateRestaurant(id: Int!, updateRestaurantInput: UpdateRestaurantInput!): Restaurant!
  removeRestaurant(id: Int!): Boolean!
  createMovie(createMovieInput: CreateMovieInput!): Movie!
  updateMovie(id: ID!, updateMovieInput: UpdateMovieInput!): Movie!
  removeMovie(id: ID!): Boolean!
  createPartnership(createPartnershipInput: CreatePartnershipInput!): Partnership!
  updatePartnership(id: ID!, updatePartnershipInput: UpdatePartnershipInput!): Partnership!
  removePartnership(id: Int!): Boolean!
  login(input: LoginDto!): AuthResponseDto!
  validate(token: String!): Boolean!
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
  points: Int! = 0
}

input UpdateUserInput {
  id: ID!
  name: String
  email: String
  password: String
  points: Int
}

input CreateFactInput {
  userId: Int!
  fact: String!
  importance: Float
}

input UpdateFactInput {
  userId: Int
  fact: String
  dateAdded: String
  importance: Int
}

input CreateDateIdeaInput {
  idea: String!
  category: String!
  review: String
  enthusiasm: Int!
  done: Boolean = false
  userId: Int!
  partnershipIds: [Int!]
}

input UpdateDateIdeaInput {
  idea: String
  category: String
  review: String
  dateAdded: String
  enthusiasm: Int
  done: Boolean
  userId: Int
  partnershipIds: [Int!]
}

input CreateQuestionInput {
  questionText: String!
  category: String!
  answer: String
  userId: Int!
  partnershipIds: [Int!]
}

input UpdateQuestionInput {
  questionText: String
  category: String
  answer: String
  dateAsked: DateTime
  partnershipIds: [Int!]
}

input CreatePetInput {
  name: String!
  type: String!
  partnershipId: Float!
}

input UpdatePetInput {
  name: String
  type: String
  hungerLevel: Int
  happinessLevel: Int
  lastFed: DateTime
  partnershipId: Int
}

input CreateActivityInput {
  activityType: String!
  pointsEarned: Int = 0
  date: String
  userId: Int!
  partnershipIds: [Int!]
}

input UpdateActivityInput {
  activityType: String
  pointsEarned: Int
  date: String
  userId: Int
  partnershipIds: [Int!]
}

input CreateRestaurantInput {
  name: String!
  location: String!
  cuisineType: String!
  extra: String
  partnershipIds: [Int!]
}

input UpdateRestaurantInput {
  name: String
  location: String
  cuisineType: String
  dateAdded: String
  extra: String
  visited: Boolean
  partnershipIds: [Int!]
}

input CreateMovieInput {
  title: String!
  genre: String!
  priority: String
  partnershipIds: [Int!]
}

input UpdateMovieInput {
  title: String
  genre: String
  priority: String
  partnershipIds: [Int!]
}

input CreatePartnershipInput {
  user1Id: Int!
  user2Id: Int!
}

input UpdatePartnershipInput {
  user1Id: Int
  user2Id: Int
  startDate: String
  status: String
  sharedPoints: Int
}

input LoginDto {
  email: String!
  password: String!
}